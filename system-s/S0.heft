data S0
| Done
| Fail
| Test S0
| Neg S0
| Seq S0 S0
| Or S0 S0
| OrL S0 S0
| Rec String S0
| SVar String

data Term
| TVar String
| Con String (List Term)

data Env (v : *) (e : R)
| ENil
| ECons Var (List Var) { v / e * e } (Env v e)

data List (a : *)
| Nil
| Cons a (List a)

val append -- : List a -> List a -> List a
  = \xs -> \ys -> match xs
                  | Nil -> ys
                  | Cons x' xs' -> Cons x' (append xs' ys)
                  end

val singleton
  = \x -> Cons x Nil

val isNil
  = \xs ->
    match xs
    | Nil -> T
    | Cons _ _ -> F
    end

val isSingleton
  = \xs ->
    match xs
    | Nil -> F
    | Cons _ xs -> isNil xs
    end

data Unit
| U

effect Fail
| fail    : { a / <Failure, e> * eg }

val hFail = \m -> {
  handle Fail
  | fail _ k -> Nil
  | return x _ -> x
  end U m!
}

data Bool
| T
| F

-- ambiguous parse: Bool can be both the built-in type or a type constructor

effect Choice
| choose  : { a / <Choice, e> * eg }
         -> { a / <Choice, e> * eg }
         -> { a / <Choice, e> * eg }
| chooseL : { a / <Choice, e> * eg }
         -> { a / <Choice, e> * eg }
         -> { a / <Choice, e> * eg }

val hChoice = \m -> {
  handle Choice
  | choose  m1 m2 _ k -> append (k U m1)! (k U m2)!
  | chooseL m1 m2 _ k ->
    match (k U m1)!
    | Nil -> (k U m2)!
    | Cons x xs -> Cons x xs
    end
  | return x _ -> x
  end U m!
}

effect Neg
| negate : { Unit / <Neg, e> * eg } -> { Unit / <Neg, e> * eg }

-- higher-order
val hNeg = \h -> \m -> {
  handle Neg
  | negate m _ k -> (k U {
      match (h m)!
      | Nil -> U
      | Cons _ _ -> `fail
      end
    })!
  | return x _ -> x
  end U m!
}

val hND = \m -> hNeg hND (hChoice (hFail { Cons m! Nil })) 

effect Test
| test : { a / <Test, e> * eg } -> { a / <Test, e> * eg }

-- higher-order
val hTest = \h -> \s0 -> \m -> {
  handle Test
  | test m s k -> (k s {
      match (h s m)!
      | Tuple x _ -> x
      end
    })!
  | return x s -> Tuple x s
  end s0 m!
}

val hTest' = \t -> \m -> hTest hTest' t m

effect Fn -- (v : *)
| app : Var -> List { v / <S0, e> * eg } -> { v / <S0, e> * eg }
| recurse : Var -> { a / <S0, e> * eg } -> { a / <S0, e> * eg }

val lookupEnv -- : Var -> Env e -> Maybe (Tuple (List Var) { Term / e * e })
  = \x -> \env ->
    match env
    | ECons y args m ys ->
      match (x == y)
      | True -> Just (Tuple args m)
      | False -> lookupEnv x ys
      end
    end

val growEnv -- : List String -> List { v / e * e } -> Env e -> Env e
  = \xs -> \ys -> \env ->
    match xs
    | Nil -> env
    | Cons x xs' ->
      match ys
      | Cons y ys' -> ECons x Nil y (growEnv xs' ys' env)
      end
    end

val hFn = \env0 -> \m -> {
  handle Fn
  | app f xs _ k -> match lookupEnv f env0
                    | Just (Tuple xs' m) -> 
                      (k U (hFn (growEnv xs' xs env0) m))!
                    | Nothing -> Nil
                    end
  -- is this still denotational?
  | recurse n m _ k -> (k U (hFn (ECons n { `recurse m } env0) m))!
  | return x _ -> x
  end U m!
}

val hS0 = \env -> \t -> \m -> hFn env (hND (hTest' t m))

effect Prog -- (ei : Row) (v : *)
| define  : Var -> List Var -> { v / ei * ei } -> { Unit / <Prog, e> * eg }

val hS0' = hS0 ENil (TCons X Nil)

--------------------------------------------------------------------------------
-- fail
--------------------------------------------------------------------------------

val test_fail_prog0 = { `fail }
val test_fail0 = {
  match (hS0' test_fail_prog0)!
  | Nil -> T
  | Cons _ _ -> F
  end
}

--------------------------------------------------------------------------------
-- negate
--------------------------------------------------------------------------------

-- negate a failure
val test_negate_prog0 = { `negate { `fail } }
val test_negate0 = { isSingleton (hS0' test_negate_prog0)! }

-- negate a success
val test_negate_prog1 = { `negate { A } }
val test_negate1 = { isNil (hS0' test_negate_prog1)! }

val test_negate_prog2 = { let _ = `negate { `fail } in A }
val test_negate2 = { isSingleton (hS0' test_negate_prog2)! }

val test_negate_prog3 = { let _ = `negate { A } in `fail }
val test_negate3 = { isNil (hND test_negate_prog3)! }

--------------------------------------------------------------------------------
-- test
--------------------------------------------------------------------------------

-- this test currently doesn't do much because there are no functions yet
-- that modify the term 
val test_test_prog0 = { `test { A } }
val test_test0 = { isSingleton (hS0' test_test_prog0)! }

--------------------------------------------------------------------------------
-- choose
--------------------------------------------------------------------------------

val test_choose_prog0 = { `choose {A} {B} }
val test_choose0 = { 
  match (hS0' test_choose_prog0)!
  | Nil -> F
  | Cons x xs -> isSingleton xs
  end
}

val test_choose_prog1 = { `choose {`fail} {B} }
val test_choose1 = { isSingleton (hS0' test_choose_prog1)! }

val test_choose_prog2 = { `choose {A} {`fail} }
val test_choose2 = { isSingleton (hS0' test_choose_prog2)! }

val test_choose_prog3 = { `choose {`fail} {`fail} }
val test_choose3 = { isNil (hS0' test_choose_prog3)! }

--------------------------------------------------------------------------------
-- chooseL
--------------------------------------------------------------------------------

val test_chooseL_prog0 = { `chooseL {A} {B} }
val test_chooseL0 = { isSingleton (hS0' test_chooseL_prog0)! }

val test_chooseL_prog1 = { `chooseL {`fail} {B} }
val test_chooseL1 = { isSingleton (hS0' test_chooseL_prog1)! }

val test_chooseL_prog2 = { `chooseL {A} {`fail} }
val test_chooseL2 = { isSingleton (hS0' test_chooseL_prog2)! }

val test_chooseL_prog3 = { `chooseL {`fail} {`fail} }
val test_chooseL3 = { isNil (hS0' test_chooseL_prog3)! }

--------------------------------------------------------------------------------
-- app
--------------------------------------------------------------------------------

val test_app_prog0 = { `app Id (Cons {A} Nil) }
val test_app0 = { 
  isSingleton 
    (hS0
      (ECons Id (Cons Y Nil) { `app Y Nil } ENil) 
      (TCons X Nil)
      test_app_prog0)!
}

--------------------------------------------------------------------------------
-- recurse
--------------------------------------------------------------------------------

val test_recurse_prog0 = { `recurse Y { `chooseL { A } { `app Y Nil } } }
val test_recurse0 = { isSingleton (hS0' test_recurse_prog0)! }

val main = {
  Tuple
    (test_fail0)!
    (test_negate0)!
    (test_negate1)!
    (test_negate2)!
    (test_negate3)!
    (test_test0)!
    (test_choose0)!
    (test_choose1)!
    (test_choose2)!
    (test_choose3)!
    (test_chooseL0)!
    (test_chooseL1)!
    (test_chooseL2)!
    (test_chooseL3)!
    (test_app0)!
    (test_recurse0)!
}
