val hCatch = \ prog -> {
  handle Catch
  | throw p k -> Nothing
  | catch m1 m2 p k -> (k p {
      match (hCatch m1)!
      | Nothing -> m2!
      | Just x -> x
      end
    })!
  | return x _ -> Just x
  end Z prog! }

val hCatch2 = \ prog -> {
  handle Catch
  | throw p k -> Nothing
  | catch m1 m2 p k -> (k p {
      match (hCatch2 m1)!
      | Nothing -> `abort (k p m2)
      | Just x -> x
      end
    })!
  | abort m p k -> m!
  | return x _ -> Just x
  end Z prog! }

val hState = \ s0 -> \ prog -> {
  handle State
  | get    s k -> (k s { s })!
  | put s' s k -> (k s' { Z })!
  | return x s -> Pair x s
  end s0 prog! }

val transact = {
  let _ = `put (S Z) in
  let _ = `catch { let _ = `put (S (S Z)) in `throw } { Z } in
  `get
}

val main = {
  Tuple (hCatch (hState Z transact))!
        (hState Z (hCatch transact))!
        (hCatch2 (hState Z transact))! -- interaction!
        (hState Z (hCatch2 transact))!
}
